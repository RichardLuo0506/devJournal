{
  "name": "angular-media-queries",
  "version": "0.5.1",
  "description": "Angular service to test if a given @media statment is true.",
  "main": "match-media.js",
  "scripts": {
    "test": "karma start"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jacopotarantino/angular-match-media.git"
  },
  "keywords": [
    "angular",
    "angularjs",
    "matchmedia",
    "@media",
    "css"
  ],
  "author": {
    "name": "Jack",
    "email": "jack@ofspades.com"
  },
  "license": "CC-BY-SA-4.0",
  "bugs": {
    "url": "https://github.com/jacopotarantino/angular-match-media/issues"
  },
  "homepage": "https://github.com/jacopotarantino/angular-match-media#readme",
  "readme": "# Angular matchMedia Module\n\nProvides an Angular service that returns true if the current screen width matches or false if not. Uses the screen widths predefined in Twitter Bootstrap 3 or a customized size you define. There is a staic method `is` which checks for a match on page load and a dynamic method `on` which checks for a match and updates the value on window resize.\n\n## Installation\n\nDownload the component via bower:\n```bash\nbower install --save angular-media-queries\n```\n\nInclude AngularJS on the page and then include this script. If possible, include these scripts in the footer of your site before the closing `</body>` tag.\n```html\n<script type='text/javascript' src='/static/path/to/angular.min.js'></script>\n<script type='text/javascript' src='/static/path/to/angular-media-queries/match-media.js'></script>\n```\n\n## Usage\n\nRequire the `matchMedia` module as a dependency in your app:\n```javascript\nangular.module('myApp', ['matchMedia'])\n```\n\n### In a Controller\n\n#### Is\nUse the service's `is` method to determine if the screensize matches the given string/array.\n```javascript\nangular.module('myApp', ['matchMedia'])\n.controller('mainController', ['screenSize', function (screenSize) {\n  var data = complicatedChartData;\n\n  //Determine to either perform cpu/network-intensive actions(desktop) or retrieve a small static image(mobile). \n  if (screenSize.is('xs, sm')) {\n    // it's a mobile device so fetch a small image\n    $http.post('/imageGenerator', data)\n    .success(function (response) {\n      document.querySelector('.chart').src = response.chartUrl;\n    });\n  }\n  else {\n    // it's a desktop size so do the complicated calculations and render that\n    document.querySelector('.chart')\n    .appendCanvas()\n    .parseData()\n    .renderCrazyChart();\n  }\n}]);\n```\n\n#### On\nThe callback fed to `.on` will execute on every window resize and takes the truthiness of the media query as its first argument.\nBe careful using this method as `resize` events fire often and can bog down your application if not handled properly.\n - Executes the callback function on window resize with the match truthiness as the first argument.\n - Returns the current match truthiness.\n - Passing $scope as a third parameter is optional, when not passed it will use $rootScope\n\n```javascript\nangular.module('myApp', ['matchMedia'])\n.controller('mainController', ['screenSize', function (screenSize) {\n  $scope.isMobile = screenSize.on('xs, sm', function(isMatch){\n    $scope.isMobile = isMatch;\n  });\n}]);\n```\n\n#### When\nIf you only want the callback to fire while in the correct screensize, use the `when` method.\nBe careful using this method as `resize` events fire often and can bog down your application if not handled properly.\n```javascript\nangular.module('myApp', ['matchMedia'])\n.controller('mainController', ['screenSize', function (screenSize) {\n\n    // Will fire as long as the screen is size between 768px and 991px\n    screenSize.when('sm', function() {\n        console.log('Your screen size at the moment is between 768px and 991px.');\n    });\n}]);\n```\n\n#### OnChange\nThe callback fed to `.onChange` will execute on every window resize and takes the truthiness of the media query as its first argument.\nBe careful using this method as `resize` events fire often and can bog down your application if not handled properly.\n - Executes the callback function ONLY when the match differs from previous match.\n - Returns the current match truthiness.\n - The 'scope' parameter is required for cleanup reasons (destroy event).\n\n```javascript\nangular.module('myApp', ['matchMedia'])\n.controller('mainController', ['screenSize', function (screenSize) {\n  $scope.isMobile = screenSize.onChange('xs, sm', function(isMatch){\n    $scope.isMobile = isMatch;\n  });\n}]);\n```\n\n#### isRetina\nThis will return a boolean to indicate if the current screen is hi-def/retina.\n```javascript\nangular.module('myApp', ['matchMedia'])\n.controller('mainController', ['screenSize', function (screenSize) {\n  $scope.isRetina = screenSize.isRetina;\n}]);\n```\n\n### Filter\n\nOperate on string values with the filter: Have the placeholder sign % replaced by the actual media query rule name.\n\n#### Example:\n```html\n    <div> {{'Your screen size is: ' | media }} \"</div>\n```\n\n#### Example with replace:\n```html\n    <div ng-include=\"'/views/_partials/_team_%.html' | media:{ replace: '%' }\"></div>\n```\n\n#### Extended example:\n```html\n    <div ng-include=\"'/views/_partials/_team_%.html' | media:{ replace: '%', groups: { mobile:['ti','xs','sm'], desktop:['md','lg'] } }\"></div>\n```\n\n### ngIf Example\n\nIn your controller you can create variables that correspond to screen sizes. For example add the following to your controller:\n```javascript\n// Using static method `is`\nangular.module('myApp', ['matchMedia'])\n.controller('mainController', ['screenSize', function (screenSize) {\n  $scope.desktop = screenSize.is('md, lg');\n  $scope.mobile = screenSize.is('xs, sm');\n}]);\n\n// Using dynamic method `on`, which will set the variables initially and then update the variable on window resize\n$scope.desktop = screenSize.on('md, lg', function(match){\n    $scope.desktop = match;\n});\n$scope.mobile = screenSize.on('xs, sm', function(match){\n    $scope.mobile = match;\n});\n```\n\nThen in your HTML you can show or hide content using ngIf or similar directives that take an Angular expression:\n```javascript\n<img ng-if='desktop' ng-src='http://example.com/path/to/giant/image.jpg'>\n```\nThis particular example is great for only loading large, unnecessary images on desktop computers.\n\nNote: It's important if you plan on using screensize.is() in directives to assign its return value to a scoped variable. If you don't, it will only be evaluated once and will not update if the window is resized or if a mobile device is turned sideways.\n\n### Custom Screen Sizes or Media Queries\n\nYou can access and therefore customize the media queries or create your own:\n```javascript\nangular.module('myApp', ['matchMedia'])\n.controller('mainController', ['screenSize', function (screenSize) {\n  screenSize.rules = {\n    retina: 'only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)',\n    superJumbo: '(min-width: 2000px)',\n\n  };\n\n  if (screenSize.is('retina')) {\n    // switch out regular images for hi-dpi ones\n  }\n\n  if (screenSize.is('superJumbo')) {\n    // do something for enormous screens\n  }\n}]);\n```\n\n## License\n\nThis work is licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/deed.en_US.\n\n## Contributors\n\n* Module roughly based on https://github.com/chrismatheson/ngMediaFilter\n* Polyfill from https://github.com/paulirish/matchMedia.js/\n* @jacopotarantino\n* @thatmarvin\n* Matthias Max @bitflowertweets\n\n## Todo\n\n* Write tests.\n* Add a simple directive wrapper for ng-if.\n* Add Grunt tasks.\n",
  "readmeFilename": "README.md",
  "_id": "angular-media-queries@0.5.1",
  "dist": {
    "shasum": "283953cff4166cd3e585b39c8ac41e1cc54cc115"
  },
  "_from": "angular-media-queries@",
  "_resolved": "https://registry.npmjs.org/angular-media-queries/-/angular-media-queries-0.5.1.tgz"
}
